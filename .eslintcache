[{"/home/fouad/email/src/context/Gmail.ts":"1","/home/fouad/email/src/components/Signin.tsx":"2","/home/fouad/email/src/components/mail/Editor.tsx":"3","/home/fouad/email/src/components/mail/Contacts.tsx":"4","/home/fouad/email/src/components/mail/Headers.tsx":"5","/home/fouad/email/src/components/Inputs/AdvancedEditor.tsx":"6","/home/fouad/email/src/components/Gmail.tsx":"7","/home/fouad/email/src/components/settings/ContactAdd/ContactAdd.tsx":"8","/home/fouad/email/src/App.tsx":"9","/home/fouad/email/src/utils/gmail/GrabContact.ts":"10","/home/fouad/email/src/components/design/ContactItem.tsx":"11","/home/fouad/email/src/components/settings/settings/Settings.tsx":"12","/home/fouad/email/src/constant/constant.ts":"13","/home/fouad/email/src/components/mail/ListMessages.tsx":"14","/home/fouad/email/src/components/Loader/Loader.tsx":"15","/home/fouad/email/src/components/Inputs/TextareaChat.tsx":"16","/home/fouad/email/src/components/settings/global/GeneralSettings.tsx":"17","/home/fouad/email/src/utils/gmail/emails.ts":"18","/home/fouad/email/src/utils/gmail/EmailContentFetch.ts":"19","/home/fouad/email/src/components/Error/ErrorLoading.tsx":"20","/home/fouad/email/src/utils/gmail/SendMail.ts":"21","/home/fouad/email/src/utils/gmail/ListEmailId.ts":"22","/home/fouad/email/src/reducer/gmailReducer.ts":"23","/home/fouad/email/src/utils/gmail/LoadContactGmail.ts":"24","/home/fouad/email/src/components/mail/AttachedFiles.tsx":"25","/home/fouad/email/src/utils/gmail/GetProfileEmail.ts":"26"},{"size":705,"mtime":1607463994847,"results":"27","hashOfConfig":"28"},{"size":1123,"mtime":1606477002827,"results":"29","hashOfConfig":"28"},{"size":819,"mtime":1607377557274,"results":"30","hashOfConfig":"28"},{"size":1633,"mtime":1607451863419,"results":"31","hashOfConfig":"28"},{"size":2166,"mtime":1606748085776,"results":"32","hashOfConfig":"28"},{"size":1951,"mtime":1607377755743,"results":"33","hashOfConfig":"28"},{"size":10205,"mtime":1607464150736,"results":"34","hashOfConfig":"28"},{"size":5804,"mtime":1607450976488,"results":"35","hashOfConfig":"28"},{"size":3097,"mtime":1607467001326,"results":"36","hashOfConfig":"28"},{"size":692,"mtime":1607453163047,"results":"37","hashOfConfig":"28"},{"size":790,"mtime":1607449400672,"results":"38","hashOfConfig":"28"},{"size":3874,"mtime":1607463976414,"results":"39","hashOfConfig":"28"},{"size":476,"mtime":1607436345737,"results":"40","hashOfConfig":"28"},{"size":5647,"mtime":1607439280394,"results":"41","hashOfConfig":"28"},{"size":316,"mtime":1606674133173,"results":"42","hashOfConfig":"28"},{"size":3708,"mtime":1607422421510,"results":"43","hashOfConfig":"28"},{"size":1584,"mtime":1607451820014,"results":"44","hashOfConfig":"28"},{"size":428,"mtime":1607458415882,"results":"45","hashOfConfig":"28"},{"size":673,"mtime":1607458668480,"results":"46","hashOfConfig":"28"},{"size":648,"mtime":1607446545549,"results":"47","hashOfConfig":"28"},{"size":1599,"mtime":1607463190620,"results":"48","hashOfConfig":"28"},{"size":1130,"mtime":1607463170588,"results":"49","hashOfConfig":"28"},{"size":3667,"mtime":1607424241433,"results":"50","hashOfConfig":"28"},{"size":779,"mtime":1607463779173,"results":"51","hashOfConfig":"28"},{"size":3156,"mtime":1607378226862,"results":"52","hashOfConfig":"28"},{"size":407,"mtime":1607467001786,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e0i7g5",{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"67"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"67"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fouad/email/src/context/Gmail.ts",[],"/home/fouad/email/src/components/Signin.tsx",["114"],"/home/fouad/email/src/components/mail/Editor.tsx",["115","116"],"import { Button, Col, Row } from 'antd';\nimport React, { useState } from 'react';\nimport { TextAreaChat } from '../Inputs/TextareaChat';\nimport AdvancedEditor from '../Inputs/AdvancedEditor';\n\ninterface EditorProps {\n  editor: string;\n  currentContact: string;\n  sendMessage: (content: string, header: string) => any;\n}\n\nconst EditorI: React.FC<EditorProps> = ({ editor, currentContact, sendMessage }) => {\n  return (\n    <Row className={'editor' + (editor !== 'simple' ? ' editor-advanced' : '')}>\n      <Col span={24} className=\"editor-container\">\n        {editor === 'simple' ? (\n          <TextAreaChat onSubmit={sendMessage} to={currentContact} />\n        ) : (\n          <AdvancedEditor to={currentContact} onSubmit={sendMessage} />\n        )}\n      </Col>\n    </Row>\n  );\n};\n\nexport default React.memo(EditorI);\n",["117","118"],"/home/fouad/email/src/components/mail/Contacts.tsx",[],"/home/fouad/email/src/components/mail/Headers.tsx",["119"],"import { Button, Col, Row } from 'antd';\nimport React, { useCallback, useState } from 'react';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport { Header } from 'antd/lib/layout/layout';\n\ninterface HeadersProps {\n  headers: Array<{ name: string; value: string }>;\n}\n\nconst dateTimeFormat = (dateString: string): string => {\n  const date = new Date(dateString);\n  const options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n  return date.toLocaleDateString('en-US', options);\n};\n\nconst Headers: React.FC<HeadersProps> = ({ headers }) => {\n  const neededHeaders = ['From', 'To', 'Date', 'Subject'];\n  const [showHeaders, setShowHeaders] = useState(false);\n\n  const showHeaderCLickHandler = useCallback(() => {\n    setShowHeaders((state) => !state);\n  }, []);\n\n  return (\n    <Row className=\"headers\">\n      <Col span={24}>\n        <Row>\n          <Col span={24} className=\"from\">\n            {headers.find((header) => header.name === 'From')?.value}\n          </Col>\n          <Col span={24} className=\"to\">\n            to me{' '}\n            <Button ghost className=\"arrow-header\" onClick={showHeaderCLickHandler}>\n              <ArrowDropDownIcon />\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      {showHeaders && (\n        <Col span={24} className=\"headers-container\">\n          {neededHeaders.map((headerAttribute, index) => {\n            const value = headers.find((header) => header.name === headerAttribute)?.value;\n            if (value === void 0 || value === '') {\n              return void 0;\n            }\n            return (\n              <Col span={24} key={index}>\n                <Row className=\"header-attribute\">\n                  <Col span={4} className=\"attribute-name\">\n                    {headerAttribute}\n                  </Col>\n                  <Col span={20} className=\"attribute-value\">\n                    {headerAttribute === 'Date' ? dateTimeFormat(value) : value}\n                  </Col>\n                </Row>\n              </Col>\n            );\n          })}\n        </Col>\n      )}\n    </Row>\n  );\n};\n\nexport default React.memo(Headers);\n",["120","121"],"/home/fouad/email/src/components/Inputs/AdvancedEditor.tsx",["122"],"import { Button, Col, Row } from 'antd';\nimport React, { useCallback, useState } from 'react';\nimport ReactQuill from 'react-quill'; // ES6\nimport 'react-quill/dist/quill.snow.css'; // ES6\n\ninterface AdvancedEditorProps {\n  to: string;\n  onSubmit: (content: string, header: string) => any;\n}\n\nconst AdvancedEditor: React.FC<AdvancedEditorProps> = ({ to, onSubmit }) => {\n  const [content, setContent] = useState<string>('');\n\n  const onChangeHandler = useCallback((content: string) => {\n    setContent(content);\n  }, []);\n\n  const onClearClickHandler = useCallback(() => {\n    setContent('');\n  }, []);\n\n  const onSendClickHandler = useCallback(() => {\n    onSubmit(content, 'Content-Type: text/html; charset=\"UTF-8\"\\r\\n');\n    setContent('');\n  }, [content]);\n\n  const modules = {\n    toolbar: [\n      [{ header: [1, 2, false] }],\n      ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n      [{ list: 'ordered' }, { list: 'bullet' }, { indent: '-1' }, { indent: '+1' }],\n      ['link', 'image'],\n      ['clean'],\n    ],\n  };\n\n  const formats = [\n    'header',\n    'font',\n    'size',\n    'bold',\n    'italic',\n    'underline',\n    'strike',\n    'blockquote',\n    'list',\n    'bullet',\n    'indent',\n    'link',\n    'image',\n    'color',\n  ];\n\n  return (\n    <Row className=\"editor-advanced-container\" dir=\"column\">\n      <Col span={24} className=\"editor-core-container\">\n        <ReactQuill\n          placeholder={`Message ${to}`}\n          modules={modules}\n          formats={formats}\n          theme={'snow'} // pass false to use minimal theme\n          value={content}\n          onChange={onChangeHandler}\n        />\n      </Col>\n\n      <Col span={24} className=\"actions\">\n        <Button danger={true} onClick={onClearClickHandler}>\n          Clear\n        </Button>\n        <Button type=\"primary\" onClick={onSendClickHandler}>\n          Send\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n\nexport default React.memo(AdvancedEditor);\n","/home/fouad/email/src/components/Gmail.tsx",["123","124","125"],"/home/fouad/email/src/components/settings/ContactAdd/ContactAdd.tsx",["126","127","128","129","130"],"import { Modal, Row, Col, Input, Button, Alert } from 'antd';\nimport React, { useCallback, useContext, useState } from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Remove } from '@material-ui/icons';\nimport { GmailContext } from '../../../context/Gmail';\nimport { Contact } from '../../mail/Contacts';\n\ninterface ContactAddProps {\n  visible: boolean;\n  onOk: () => void;\n  onCancel: () => void;\n}\n\nconst ContactAdd: React.FC<ContactAddProps> = ({ visible, onCancel, onOk }) => {\n  const { state, setContacts } = useContext(GmailContext);\n\n  const [contactAdd, setContactAdd] = useState<{\n    errorAdding: boolean;\n    errorContent: string;\n    contact: Contact;\n  }>({\n    errorAdding: false,\n    errorContent: '',\n    contact: {\n      kickname: '',\n      emails: [''],\n    },\n  });\n\n  const addContactCancelHandler = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n    setContactAdd((state) => ({ ...state, addContact: false }));\n  }, []);\n\n  const addContactEmailChangeHandler = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n      event.stopPropagation();\n      const value = event.target.value;\n      contactAdd.contact.emails[index] = value;\n      setContactAdd((state) => ({ ...state, contact: { ...state.contact } }));\n    },\n    [contactAdd]\n  );\n\n  const removeContactEmailHandler = useCallback(\n    (index: number) => {\n      contactAdd.contact.emails.splice(index, 1);\n      setContactAdd((state) => ({ ...state }));\n    },\n    [contactAdd]\n  );\n\n  const addContactEmailHandler = useCallback(() => {\n    setContactAdd((state) => ({ ...state, contact: { ...state.contact, emails: [...state.contact.emails, ''] } }));\n  }, []);\n\n  const addContactKicknameChangeHandler = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    event.stopPropagation();\n    const value = event.target.value;\n    setContactAdd((state) => ({ ...state, contact: { ...state.contact, kickname: value } }));\n  }, []);\n\n  const addContactSaveHandler = useCallback(\n    (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      event.stopPropagation();\n      if (contactAdd.contact.kickname === '') {\n        setContactAdd((state) => ({ ...state, errorAdding: true, errorContent: 'Cannot accept an empty name' }));\n      } else {\n        if (state!.contacts.map((contact) => contact.kickname).includes(contactAdd.contact.kickname)) {\n          setContactAdd((state) => ({ ...state, errorAdding: true, errorContent: 'Given name already exists' }));\n        } else {\n          for (const contact of contactAdd.contact.emails) {\n            if (typeof contact === 'string' && contact !== '') {\n              if (/^[a-zA-Z0-9\\.\\-]+@[a-zA-Z0-9\\.]+\\.[a-zA-Z0-9]+$/.test(contact)) {\n                if (state!.contacts.findIndex((contactCache) => contactCache.emails.includes(contact)) === -1) {\n                  setContacts && setContacts([...state!.contacts, { ...(contactAdd.contact as Contact) }]);\n                  setContactAdd({\n                    errorAdding: false,\n                    contact: {\n                      kickname: '',\n                      emails: [''],\n                    },\n                    errorContent: '',\n                  });\n                  onOk();\n                } else {\n                  setContactAdd((state) => ({\n                    ...state,\n                    errorAdding: true,\n                    errorContent: `Contact ${contact} already exists`,\n                  }));\n                  return void 0;\n                }\n              } else {\n                setContactAdd((state) => ({\n                  ...state,\n                  errorAdding: true,\n                  errorContent: `The given email (${contact}) it is not correct mail address`,\n                }));\n                return void 0;\n              }\n            } else {\n              setContactAdd((state) => ({\n                ...state,\n                errorAdding: true,\n                errorContent: 'Cannot add contact without email address',\n              }));\n              return void 0;\n            }\n          }\n        }\n      }\n    },\n    [contactAdd]\n  );\n\n  return (\n    <Modal title=\"Add new contact\" visible={visible} onOk={addContactSaveHandler} onCancel={onCancel}>\n      <Row className=\"add-contact-modal\">\n        {contactAdd.errorAdding && (\n          <Col span={24} className=\"section\">\n            <Alert type=\"error\" message={contactAdd.errorContent} closable={true} />\n          </Col>\n        )}\n        <Col span={24} className=\"section\">\n          <Row>\n            <Col span={6}>Kickname</Col>\n            <Col span={18}>\n              <Input value={contactAdd.contact.kickname} onChange={addContactKicknameChangeHandler} />\n            </Col>\n          </Row>\n        </Col>\n        <Col span={24} className=\"section\">\n          <Row>\n            <Col span={6}>Email</Col>\n            <Col span={18}>\n              {contactAdd.contact.emails!.map((email, index) => (\n                <Row key={index}>\n                  <Col span={18}>\n                    <Input value={email} onChange={(e) => addContactEmailChangeHandler(e, index)} />\n                  </Col>\n                  <Col span={4} offset={2}>\n                    {index === 0 ? (\n                      <Button onClick={addContactEmailHandler}>\n                        <AddIcon />\n                      </Button>\n                    ) : (\n                      <Button onClick={() => removeContactEmailHandler(index)}>\n                        <Remove />\n                      </Button>\n                    )}\n                  </Col>\n                </Row>\n              ))}\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Modal>\n  );\n};\n\nexport default React.memo(ContactAdd);\n","/home/fouad/email/src/App.tsx",[],"/home/fouad/email/src/utils/gmail/GrabContact.ts",[],"/home/fouad/email/src/components/design/ContactItem.tsx",[],"/home/fouad/email/src/components/settings/settings/Settings.tsx",["131","132"],"/home/fouad/email/src/constant/constant.ts",["133","134"],"import { GmailReducerInterface } from '../reducer/gmailReducer';\n\nexport const emailRegexp = /([a-zA-Z0-9\\-\\.]{1,}@[a-zA-Z0-9\\-\\.]{1,}\\.[a-zA-Z0-9]{1,})/;\n\nexport const initialReducerValue: GmailReducerInterface = {\n  currentLabel: 'ALL',\n  nextPageToken: '',\n  cache: [],\n  labels: [],\n  contacts: [],\n  selectedContact: { kickname: '', emails: [] },\n  currentContact: '',\n  messageShowModel: 'snippet',\n  userEmail: '',\n  editor: 'simple',\n  messageThread: 'new thread',\n};\n","/home/fouad/email/src/components/mail/ListMessages.tsx",["135"],"import { Avatar, Col, Row, Select, Tag, Typography } from 'antd';\nimport { Base64 } from 'js-base64';\nimport Headers from './Headers';\nimport React, { useContext } from 'react';\nimport { parse } from 'node-html-parser';\nimport AttachedFiles from './AttachedFiles';\nimport { GmailContext } from '../../context/Gmail';\n\ninterface ListMessagesProps {\n  messages: Array<any>;\n  messageShowModel: string;\n  userEmail: string;\n}\n\nexport const getMessageBodyAsHTML = (message: any) => {\n  const encodedBody =\n    message.payload.parts === void 0\n      ? message.payload.body.data\n      : message.payload.parts.find((part: any) => part.mimeType === 'text/html')?.body?.data;\n  const decode = Base64.decode(encodedBody || '');\n  const index = decode.indexOf('<div class=\"gmail_quote\"');\n  const cleanHTML = index > -1 ? decode.substring(0, index) : decode;\n  return cleanHTML;\n};\n\nexport const getMessageBodyAsText = (message: any) => {\n  const parsedHTML = parse(getMessageBodyAsHTML(message));\n  const cleanText = parsedHTML.innerText;\n  //TODO: continue to enhance this feature\n  const encodedBody =\n    message.payload.parts === void 0\n      ? message.payload.body.data\n      : message.payload.parts.find((part: any) => part.mimeType === 'text/plain')?.body?.data;\n  const decode = Base64.decode(encodedBody || '');\n  return cleanText;\n};\n\nconst ListMessages: React.FC<ListMessagesProps> = ({ messages, messageShowModel, userEmail }) => {\n  const { state } = useContext(GmailContext);\n  const hasMoreThanOneEmail = state!.selectedContact.emails.length > 1;\n  return (\n    <Row className=\"result\">\n      <Col span={24} className=\"header\">\n        <Row className=\"inherit-height\">\n          <Col span={hasMoreThanOneEmail ? 12 : 24} className=\"kickname\">\n            {state!.selectedContact.kickname}\n          </Col>\n          {hasMoreThanOneEmail && (\n            <Col span={12} className=\"select-other-email\">\n              <Select value={state!.currentContact}>\n                {['ALL', ...state!.selectedContact.emails].map((email, index) => (\n                  <Select.Option value={email} key={index}>\n                    {email}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Col>\n          )}\n        </Row>\n      </Col>\n      <Col span={24} className=\"messages-container\">\n        <Row>\n          {messages.map((message) => {\n            const sameUser =\n              message.payload.headers.find((header: any) => header.name === 'From').value.indexOf(userEmail) !== -1;\n            const subject = message.payload.headers.find((header: any) => header.name === 'Subject').value;\n            if (messageShowModel !== 'complete as html') {\n              const messageContent = messageShowModel === 'snippet' ? message.snippet : getMessageBodyAsText(message);\n              /** Sinppet version */\n              return (\n                <Col span={24} key={message.id}>\n                  <Row>\n                    <Col span={14} offset={sameUser ? 10 : 0} className={'message' + (sameUser ? ' me' : '')}>\n                      <Row>\n                        {subject !== '' && !/^[\\s]+$/.test(subject) && (\n                          <Col span={24} className=\"tags\">\n                            <Tag color=\"green\">Subject: {subject}</Tag>\n                          </Col>\n                        )}\n                        <Col\n                          span={24}\n                          className=\"message-content\"\n                          dangerouslySetInnerHTML={{ __html: messageContent }}\n                        ></Col>\n                        <Col span={24} className=\"attached-files\">\n                          <AttachedFiles message={message} />\n                        </Col>\n                      </Row>\n                    </Col>\n                  </Row>\n                </Col>\n              );\n            } else {\n              /** Complete version */\n              return (\n                <Col span={24} className=\"complete-html\" key={message.id}>\n                  <Row className=\"message-html\">\n                    <Col span={24}>\n                      <Row>\n                        <Col span={4} className=\"avatar\"></Col>\n                        <Col span={20} className=\"subject\">\n                          <Typography.Title level={3}> {subject === '' ? '(No title)' : subject} </Typography.Title>\n                        </Col>{' '}\n                      </Row>\n                    </Col>\n                    <Col span={24}>\n                      <Row>\n                        <Col span={4} className=\"avatar\">\n                          <Avatar />\n                        </Col>\n                        <Col span={20}>\n                          <Row>\n                            <Col span={24}>\n                              <Headers headers={message.payload.headers} />\n                            </Col>\n                            <Col span={24}>\n                              <div\n                                dangerouslySetInnerHTML={{ __html: getMessageBodyAsHTML(message) }}\n                                className=\"iframes\"\n                              />\n                            </Col>\n                            <Col span={24} className=\"attached-files\">\n                              <AttachedFiles message={message} />\n                            </Col>\n                          </Row>\n                        </Col>\n                      </Row>\n                    </Col>\n                  </Row>\n                </Col>\n              );\n            }\n          })}\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport default React.memo(ListMessages);\n","/home/fouad/email/src/components/Loader/Loader.tsx",[],"/home/fouad/email/src/components/Inputs/TextareaChat.tsx",["136","137"],"/home/fouad/email/src/components/settings/global/GeneralSettings.tsx",["138"],"/home/fouad/email/src/utils/gmail/emails.ts",[],"/home/fouad/email/src/utils/gmail/EmailContentFetch.ts",[],"/home/fouad/email/src/components/Error/ErrorLoading.tsx",[],"/home/fouad/email/src/utils/gmail/SendMail.ts",[],"/home/fouad/email/src/utils/gmail/ListEmailId.ts",[],"/home/fouad/email/src/reducer/gmailReducer.ts",["139"],"/home/fouad/email/src/utils/gmail/LoadContactGmail.ts",["140"],"/home/fouad/email/src/components/mail/AttachedFiles.tsx",["141","142"],"/home/fouad/email/src/utils/gmail/GetProfileEmail.ts",[],{"ruleId":"143","severity":1,"message":"144","line":20,"column":6,"nodeType":"145","endLine":20,"endColumn":29,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":1,"column":10,"nodeType":"149","messageId":"150","endLine":1,"endColumn":16},{"ruleId":"147","severity":1,"message":"151","line":2,"column":17,"nodeType":"149","messageId":"150","endLine":2,"endColumn":25},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"147","severity":1,"message":"156","line":4,"column":10,"nodeType":"149","messageId":"150","endLine":4,"endColumn":16},{"ruleId":"152","replacedBy":"157"},{"ruleId":"154","replacedBy":"158"},{"ruleId":"143","severity":1,"message":"159","line":25,"column":6,"nodeType":"145","endLine":25,"endColumn":15,"suggestions":"160"},{"ruleId":"143","severity":1,"message":"161","line":145,"column":6,"nodeType":"145","endLine":145,"endColumn":8,"suggestions":"162"},{"ruleId":"143","severity":1,"message":"163","line":147,"column":27,"nodeType":"145","endLine":147,"endColumn":105,"suggestions":"164"},{"ruleId":"143","severity":1,"message":"165","line":185,"column":5,"nodeType":"145","endLine":185,"endColumn":44,"suggestions":"166"},{"ruleId":"147","severity":1,"message":"167","line":30,"column":9,"nodeType":"149","messageId":"150","endLine":30,"endColumn":32},{"ruleId":"168","severity":1,"message":"169","line":74,"column":31,"nodeType":"170","messageId":"171","endLine":74,"endColumn":32,"suggestions":"172"},{"ruleId":"168","severity":1,"message":"173","line":74,"column":33,"nodeType":"170","messageId":"171","endLine":74,"endColumn":34,"suggestions":"174"},{"ruleId":"168","severity":1,"message":"169","line":74,"column":48,"nodeType":"170","messageId":"171","endLine":74,"endColumn":49,"suggestions":"175"},{"ruleId":"143","severity":1,"message":"176","line":114,"column":5,"nodeType":"145","endLine":114,"endColumn":17,"suggestions":"177"},{"ruleId":"143","severity":1,"message":"178","line":41,"column":6,"nodeType":"145","endLine":41,"endColumn":16,"suggestions":"179"},{"ruleId":"143","severity":1,"message":"180","line":51,"column":6,"nodeType":"145","endLine":51,"endColumn":13,"suggestions":"181"},{"ruleId":"168","severity":1,"message":"169","line":3,"column":42,"nodeType":"170","messageId":"171","endLine":3,"endColumn":43,"suggestions":"182"},{"ruleId":"168","severity":1,"message":"169","line":3,"column":62,"nodeType":"170","messageId":"171","endLine":3,"endColumn":63,"suggestions":"183"},{"ruleId":"147","severity":1,"message":"184","line":34,"column":9,"nodeType":"149","messageId":"150","endLine":34,"endColumn":15},{"ruleId":"147","severity":1,"message":"185","line":5,"column":10,"nodeType":"149","messageId":"150","endLine":5,"endColumn":16},{"ruleId":"143","severity":1,"message":"159","line":64,"column":5,"nodeType":"145","endLine":64,"endColumn":28,"suggestions":"186"},{"ruleId":"147","severity":1,"message":"187","line":6,"column":10,"nodeType":"149","messageId":"150","endLine":6,"endColumn":18},{"ruleId":"188","severity":1,"message":"189","line":85,"column":5,"nodeType":"190","messageId":"191","endLine":90,"endColumn":6},{"ruleId":"192","severity":1,"message":"193","line":5,"column":17,"nodeType":"149","messageId":"194","endLine":5,"endColumn":21},{"ruleId":"147","severity":1,"message":"195","line":1,"column":10,"nodeType":"149","messageId":"150","endLine":1,"endColumn":27},{"ruleId":"147","severity":1,"message":"185","line":3,"column":10,"nodeType":"149","messageId":"150","endLine":3,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["196"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-native-reassign",["197"],"no-negated-in-lhs",["198"],"'Header' is defined but never used.",["197"],["198"],"React Hook useCallback has a missing dependency: 'onSubmit'. Either include it or remove the dependency array. If 'onSubmit' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["199"],"React Hook useEffect has a missing dependency: 'enqueueSnackbar'. Either include it or remove the dependency array.",["200"],"React Hook useEffect has missing dependencies: 'enqueueSnackbar', 'messages', and 'state.userEmail'. Either include them or remove the dependency array. You can also do a functional update 'setMessages(m => ...)' if you only need 'messages' in the 'setMessages' call.",["201"],"React Hook useCallback has a missing dependency: 'enqueueSnackbar'. Either include it or remove the dependency array.",["202"],"'addContactCancelHandler' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["203","204"],"Unnecessary escape character: \\-.",["205","206"],["207","208"],"React Hook useCallback has missing dependencies: 'onOk', 'setContacts', and 'state'. Either include them or remove the dependency array. If 'onOk' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["209"],"React Hook useCallback has missing dependencies: 'onOk' and 'saveSettings'. Either include them or remove the dependency array. If 'onOk' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["210"],"React Hook useCallback has a missing dependency: 'onCancel'. Either include it or remove the dependency array. If 'onCancel' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["211"],["212","213"],["214","215"],"'decode' is assigned a value but never used.","'Base64' is defined but never used.",["216"],"'Contacts' is defined but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","@typescript-eslint/no-use-before-define","'gapi' was used before it was defined.","noUseBeforeDefine","'FormatSizeTwoTone' is defined but never used.",{"desc":"217","fix":"218"},"no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"messageId":"227","fix":"228","desc":"229"},{"messageId":"230","fix":"231","desc":"232"},{"messageId":"227","fix":"233","desc":"229"},{"messageId":"230","fix":"234","desc":"232"},{"messageId":"227","fix":"235","desc":"229"},{"messageId":"230","fix":"236","desc":"232"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"messageId":"227","fix":"243","desc":"229"},{"messageId":"230","fix":"244","desc":"232"},{"messageId":"227","fix":"245","desc":"229"},{"messageId":"230","fix":"246","desc":"232"},{"desc":"247","fix":"248"},"Update the dependencies array to be: [clicked, props]",{"range":"249","text":"250"},"Update the dependencies array to be: [content, onSubmit]",{"range":"251","text":"252"},"Update the dependencies array to be: [enqueueSnackbar]",{"range":"253","text":"254"},"Update the dependencies array to be: [state.currentContact, state.currentLabel, state.selectedContact, state.cache, state.userEmail, messages, enqueueSnackbar]",{"range":"255","text":"256"},"Update the dependencies array to be: [enqueueSnackbar, state.currentContact, state.userEmail]",{"range":"257","text":"258"},"removeEscape",{"range":"259","text":"260"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"261","text":"262"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"263","text":"260"},{"range":"264","text":"262"},{"range":"265","text":"260"},{"range":"266","text":"262"},"Update the dependencies array to be: [contactAdd.contact, onOk, setContacts, state]",{"range":"267","text":"268"},"Update the dependencies array to be: [onOk, saveSettings, settings]",{"range":"269","text":"270"},"Update the dependencies array to be: [onCancel, state]",{"range":"271","text":"272"},{"range":"273","text":"260"},{"range":"274","text":"262"},{"range":"275","text":"260"},{"range":"276","text":"262"},"Update the dependencies array to be: [content, filesContent, onSubmit]",{"range":"277","text":"278"},[550,573],"[clicked, props]",[749,758],"[content, onSubmit]",[5316,5318],"[enqueueSnackbar]",[5348,5426],"[state.currentContact, state.currentLabel, state.selectedContact, state.cache, state.userEmail, messages, enqueueSnackbar]",[6528,6567],"[enqueueSnackbar, state.currentContact, state.userEmail]",[2721,2722],"",[2721,2721],"\\",[2723,2724],[2723,2723],[2738,2739],[2738,2738],[4164,4176],"[contactAdd.contact, onOk, setContacts, state]",[1429,1439],"[onOk, saveSettings, settings]",[1705,1712],"[onCancel, state]",[107,108],[107,107],[127,128],[127,127],[1964,1987],"[content, filesContent, onSubmit]"]