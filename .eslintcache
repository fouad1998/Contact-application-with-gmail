[{"/home/fouad/email/src/index.js":"1","/home/fouad/email/src/reportWebVitals.js":"2","/home/fouad/email/src/App.tsx":"3","/home/fouad/email/src/component/Signin.tsx":"4","/home/fouad/email/src/component/Gmail.tsx":"5","/home/fouad/email/src/reducer/gmailReducer.ts":"6","/home/fouad/email/src/component/Inputs/TextareaChat.tsx":"7","/home/fouad/email/src/component/Loader/Loader.tsx":"8","/home/fouad/email/src/component/mail/Headers.tsx":"9","/home/fouad/email/src/component/mail/ListMessages.tsx":"10","/home/fouad/email/src/component/mail/AttachedFiles.tsx":"11","/home/fouad/email/src/context/CreateEditorContext.ts":"12","/home/fouad/email/src/component/mail/Editor.tsx":"13","/home/fouad/email/src/component/mail/Contacts.tsx":"14","/home/fouad/email/src/component/Inputs/AdvancedEditor.tsx":"15"},{"size":427,"mtime":1606403862086,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1606342194934,"results":"18","hashOfConfig":"17"},{"size":3068,"mtime":1607029661013,"results":"19","hashOfConfig":"17"},{"size":1123,"mtime":1606477002827,"results":"20","hashOfConfig":"17"},{"size":10361,"mtime":1607370957662,"results":"21","hashOfConfig":"17"},{"size":2809,"mtime":1607030196948,"results":"22","hashOfConfig":"17"},{"size":3653,"mtime":1607276967316,"results":"23","hashOfConfig":"17"},{"size":316,"mtime":1606674133173,"results":"24","hashOfConfig":"17"},{"size":2166,"mtime":1606748085776,"results":"25","hashOfConfig":"17"},{"size":5425,"mtime":1607259155871,"results":"26","hashOfConfig":"17"},{"size":3182,"mtime":1607094555095,"results":"27","hashOfConfig":"17"},{"size":93,"mtime":1606764323048,"results":"28","hashOfConfig":"17"},{"size":1124,"mtime":1607370235296,"results":"29","hashOfConfig":"17"},{"size":11363,"mtime":1607092840531,"results":"30","hashOfConfig":"17"},{"size":1987,"mtime":1607370966918,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"e0i7g5",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/fouad/email/src/index.js",[],["70","71"],"/home/fouad/email/src/reportWebVitals.js",[],["72","73"],"/home/fouad/email/src/App.tsx",["74","75"],"/home/fouad/email/src/component/Signin.tsx",["76"],"import { CircularProgress } from '@material-ui/core';\nimport { Row, Col, Button } from 'antd';\nimport React, { useCallback, useState } from 'react';\n\ninterface SigninInterface {\n  signin: () => any;\n  loading: boolean;\n}\n\nconst Signin: React.FC<SigninInterface> = (props) => {\n  const [clicked, setClicked] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(props.loading);\n\n  let signinClickHandler = useCallback(() => {\n    if (!clicked) {\n      setClicked(true);\n      setLoading(true);\n      props.signin();\n    }\n  }, [clicked, props.signin]);\n\n  return (\n    <Row className=\"signin-container\">\n      <Col>\n        <Row className=\"signin\">\n          <Col span={24} className=\"title\">\n            <h2>Signin</h2>\n          </Col>\n          <Col span={24}>\n            <Button onClick={signinClickHandler} className=\"google-signin\" disabled={clicked}>\n              {loading && <CircularProgress color=\"inherit\" size={14} style={{ marginRight: 10 }} />}Give gmail Access\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  );\n};\n\nexport default React.memo(Signin);\n",["77","78"],"/home/fouad/email/src/component/Gmail.tsx",["79","80"],"/home/fouad/email/src/reducer/gmailReducer.ts",["81"],"/home/fouad/email/src/component/Inputs/TextareaChat.tsx",["82","83"],"import React, { useCallback, useState } from 'react';\nimport { Button, Col, Input, Row, Upload, Modal } from 'antd';\nimport { Add } from '@material-ui/icons';\nimport { RcFile, UploadFile } from 'antd/lib/upload/interface';\nimport { Base64 } from 'js-base64';\n\nconst { TextArea } = Input;\n\nconst { error } = Modal;\n\ninterface TextAreaInterface {\n  to: string;\n  onSubmit: (content: string, multipart: boolean) => any;\n}\n\nexport const TextAreaChat: React.FC<TextAreaInterface> = ({ onSubmit, to }) => {\n  const [content, setContent] = useState<string>('');\n  const [filesContent, setFilesContent] = useState<{ filename: string; size: number; content: string; type: string; id: string; file: RcFile }[]>([]);\n\n  const onChangeHandler = useCallback((event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    event.stopPropagation();\n    const {\n      target: { value },\n    } = event;\n    setContent(value);\n  }, []);\n\n  const onKeyDownHandler = useCallback(\n    (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      event.stopPropagation();\n      const { altKey, shiftKey, code, keyCode } = event;\n\n      if ((altKey || shiftKey) && (code === '\\n' || keyCode === 13)) {\n        return void 0;\n      } else if (code === '\\n' || keyCode === 13) {\n        event.preventDefault();\n        const email = `\n${filesContent.length === 0 ? '' : '--emplorium_boundary'}\n${filesContent.length === 0 ? '' : '--emplorium_boundary'}\nContent-Type: text/plain; charset=\"UTF-8\"\n${content}\n${filesContent\n  .map(\n    (file) => `\n\n--emplorium_boundary\nContent-Type: ${file.type}\nContent-Transfer-Encoding: base64\nContent-Disposition: attachment; filename=\"${file.filename}\"\n\n${file.content}\n`\n  )\n  .join('')}\n\n${filesContent.length === 0 ? '' : '--emplorium_boundary--'}\n`;\n        onSubmit && onSubmit(email, filesContent.length === 0 ? false : true);\n        setContent('');\n        setFilesContent([]);\n      }\n    },\n    [content, filesContent]\n  );\n\n  const beforeUpload = useCallback(\n    (file: RcFile) => {\n      let totalSize = file.size;\n      for (const file of filesContent) {\n        totalSize += file.size;\n      }\n      if (totalSize / 1024 ** 2 > 25) {\n        error({\n          title: 'Limit exceed',\n          content: 'Cannot select files more than 25MB in Total',\n        });\n      } else {\n        const { size, name, type, uid } = file;\n        file\n          .text()\n          .then((str) => {\n            console.log(str);\n            setFilesContent((state) => [...state, { size, type, filename: name, content: str, file, id: uid }]);\n          })\n          .catch(() =>\n            error({\n              title: 'Faild to parse the file to a text',\n              content:\n                \"The process of parsing the file to text couldn't be done of some reason, we are sorry if you can not upload that file.\\nSo please try again :)\",\n            })\n          );\n      }\n      return false;\n    },\n    [filesContent]\n  );\n\n  const onRemove = useCallback((file: UploadFile<any>) => {\n    const uid = file.uid;\n    setFilesContent((state) => state.filter((file) => file.id !== uid));\n  }, []);\n\n  return (\n    <Row>\n      <Col span={4}>\n        <Upload beforeUpload={beforeUpload} fileList={filesContent.map((e) => e.file)} onRemove={onRemove}>\n          <Button>\n            <Add />\n          </Button>\n        </Upload>\n      </Col>\n      <Col span={20}>\n        <TextArea\n          onKeyDown={onKeyDownHandler}\n          onChange={onChangeHandler}\n          placeholder={`Message to ${to}`}\n          value={content}\n          autoSize={{ maxRows: 5, minRows: 1 }}\n          className=\"textarea-chat\"\n        />\n      </Col>\n    </Row>\n  );\n};\n","/home/fouad/email/src/component/Loader/Loader.tsx",[],"/home/fouad/email/src/component/mail/Headers.tsx",["84"],"/home/fouad/email/src/component/mail/ListMessages.tsx",["85"],"/home/fouad/email/src/component/mail/AttachedFiles.tsx",["86","87"],"import { FormatSizeTwoTone } from '@material-ui/icons';\nimport { Col, Row, Typography } from 'antd';\nimport { Base64 } from 'js-base64';\nimport React from 'react';\nimport { FileIcon, defaultStyles } from 'react-file-icon';\n\ninterface AttachedFilesProps {\n  message: any;\n}\n\nconst transformFileSizeUnit = (size: number) => {\n  let i = 0;\n  const units = ['B', 'KB', 'MB', 'KB', 'GB', 'TB'];\n  while (size / 1024 > 1) {\n    ++i;\n    size /= 1024;\n  }\n  return `${size.toFixed(2)}${units[i]}`;\n};\n\nconst AttachedFiles: React.FC<AttachedFilesProps> = ({ message }) => {\n  const {\n    payload: { parts },\n  } = message;\n\n  const downloadFile = async (attachementId: string, part: any) => {\n    const { filename, mimeType } = part;\n    const params = {\n      userId: 'me',\n      messageId: message.id,\n      id: attachementId,\n    };\n    console.log('Sending request to download', params);\n    //@ts-ignore\n    const response = await gapi.client.gmail.users.messages.attachments.get(params);\n    const { data, size } = response.result;\n    const contentType = mimeType || '';\n    const sliceSize = size || 512;\n\n    var byteCharacters = atob(data.replace(/-/g, '+').replace(/_/g, '/'));\n    var byteArrays = [];\n\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n      var byteNumbers = new Array(slice.length);\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      var byteArray = new Uint8Array(byteNumbers);\n\n      byteArrays.push(byteArray);\n    }\n\n    const blob = new Blob(byteArrays, { type: contentType });\n    let urlBlob = URL.createObjectURL(blob);\n    console.log(urlBlob);\n    const a = document.createElement('a');\n    a.href = urlBlob;\n    a.download = filename;\n    a.click();\n    a.remove();\n  };\n\n  const attachmentParts = Array.isArray(parts) ? parts.filter((part: any) => part.body.attachmentId !== void 0) : [];\n  return (\n    <Row className=\"attachements\">\n      {attachmentParts.length > 0 && (\n        <Col span={24} className=\"attachement-title\">\n          <Typography.Title level={5}>Attached files</Typography.Title>\n        </Col>\n      )}\n      {attachmentParts.map((attachementPart: any, index: number) => {\n        const extention = attachementPart.filename.replace(/^.+\\.([a-zA-Z0-9]+)$/, '$1');\n        const size = transformFileSizeUnit(attachementPart.body.size);\n        console.log(attachementPart);\n        return (\n          <Col span={4} key={index} className=\"file-attached\" onClick={() => downloadFile(attachementPart.body.attachmentId, attachementPart)}>\n            <Row>\n              <Col span={24} className=\"file-icon\">\n                <span className=\"file-size\">{size}</span>\n                {/**@ts-ignore */}\n                <FileIcon extension={extention} {...defaultStyles[extention]} />\n              </Col>\n            </Row>\n            <Row>\n              <Col span={24} className=\"file-name\">\n                {attachementPart.filename}\n              </Col>\n            </Row>\n          </Col>\n        );\n      })}\n    </Row>\n  );\n};\n\nexport default React.memo(AttachedFiles);\n","/home/fouad/email/src/context/CreateEditorContext.ts",[],"/home/fouad/email/src/component/mail/Editor.tsx",["88","89","90","91","92","93","94"],"/home/fouad/email/src/component/mail/Contacts.tsx",["95","96","97","98","99"],"import { Col, Row, Tag, Button, Modal, Alert, Input, Select, Form } from 'antd';\nimport React, { useCallback, useContext, useState } from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { Remove } from '@material-ui/icons';\nimport { GmailContext, GmailSettings } from '../Gmail';\nimport { Loader } from '../Loader/Loader';\n\nexport interface Contact {\n  kickname: string;\n  emails: string[];\n}\n\ninterface ContactProps {}\n\nconst Contacts: React.FC<ContactProps> = () => {\n  const { state, loadingContacts, saveSettings, selectContact, setContacts } = useContext(GmailContext);\n\n  const [contactAdd, setContactAdd] = useState<{ addContact: boolean; errorAdding: boolean; errorContent: string; contact: Contact }>({\n    addContact: false,\n    errorAdding: false,\n    errorContent: '',\n    contact: {\n      kickname: '',\n      emails: [''],\n    },\n  });\n\n  const [settings, setSettings] = useState<GmailSettings>({\n    showSettings: false,\n    selectedLabel: state!.currentLabel,\n    messageShowModel: 'snippet',\n    editor: 'simple',\n    messageThread: 'new thread',\n  });\n\n  const addContactClickHandler = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n    setContactAdd((state) => ({ ...state, addContact: !state.addContact }));\n  }, []);\n\n  const addContactCancelHandler = useCallback((event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.stopPropagation();\n    setContactAdd((state) => ({ ...state, addContact: false }));\n  }, []);\n\n  const addContactEmailChangeHandler = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\n      event.stopPropagation();\n      const value = event.target.value;\n      contactAdd.contact.emails[index] = value;\n      setContactAdd((state) => ({ ...state, contact: { ...state.contact } }));\n    },\n    [contactAdd]\n  );\n\n  const removeContactEmailHandler = useCallback(\n    (index: number) => {\n      contactAdd.contact.emails.splice(index, 1);\n      setContactAdd((state) => ({ ...state }));\n    },\n    [contactAdd]\n  );\n\n  const addContactEmailHandler = useCallback(() => {\n    setContactAdd((state) => ({ ...state, contact: { ...state.contact, emails: [...state.contact.emails, ''] } }));\n  }, []);\n\n  const addContactKicknameChangeHandler = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    event.stopPropagation();\n    const value = event.target.value;\n    setContactAdd((state) => ({ ...state, contact: { ...state.contact, kickname: value } }));\n  }, []);\n\n  const addContactSaveHandler = useCallback(\n    (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n      event.stopPropagation();\n      if (contactAdd.contact.kickname === '') {\n        setContactAdd((state) => ({ ...state, errorAdding: true, errorContent: 'Cannot accept an empty name' }));\n      } else {\n        if (state!.contacts.map((contact) => contact.kickname).includes(contactAdd.contact.kickname)) {\n          setContactAdd((state) => ({ ...state, errorAdding: true, errorContent: 'Given name already exists' }));\n        } else {\n          for (const contact of contactAdd.contact.emails) {\n            if (typeof contact === 'string' && contact !== '') {\n              if (/^[a-zA-Z0-9\\.\\-]+@[a-zA-Z0-9\\.]+\\.[a-zA-Z0-9]+$/.test(contact)) {\n                if (state!.contacts.findIndex((contactCache) => contactCache.emails.includes(contact)) === -1) {\n                  setContacts && setContacts([...state!.contacts, { ...(contactAdd.contact as Contact) }]);\n                  setContactAdd({\n                    errorAdding: false,\n                    addContact: false,\n                    contact: {\n                      kickname: '',\n                      emails: [''],\n                    },\n                    errorContent: '',\n                  });\n                } else {\n                  setContactAdd((state) => ({ ...state, errorAdding: true, errorContent: `Contact ${contact} already exists` }));\n                  return void 0;\n                }\n              } else {\n                setContactAdd((state) => ({\n                  ...state,\n                  errorAdding: true,\n                  errorContent: `The given email (${contact}) it is not correct mail address`,\n                }));\n                return void 0;\n              }\n            } else {\n              setContactAdd((state) => ({ ...state, errorAdding: true, errorContent: 'Cannot add contact without email address' }));\n              return void 0;\n            }\n          }\n        }\n      }\n    },\n    [contactAdd]\n  );\n\n  const settingsClickHandler = useCallback(() => {\n    setSettings({\n      selectedLabel: state!.currentLabel,\n      showSettings: true,\n      messageShowModel: state!.messageShowModel,\n      editor: state!.editor,\n      messageThread: state!.messageThread,\n    });\n  }, [state]);\n\n  const settingsLabelChangeHandler = useCallback((label: string) => {\n    setSettings((state) => ({ ...state, selectedLabel: label }));\n  }, []);\n\n  const settingsMessageModelChangeHandler = useCallback((model: string) => {\n    setSettings((state) => ({ ...state, messageShowModel: model }));\n  }, []);\n\n  const settingsEditorTypeChangeHandler = useCallback((editorType: string) => {\n    setSettings((state) => ({ ...state, editor: editorType }));\n  }, []);\n\n  const settingsMessageThreadChangeHandler = useCallback((thread: string) => {\n    setSettings((state) => ({ ...state, messageThread: thread }));\n  }, []);\n\n  const settingsCancelHandler = useCallback(() => {\n    setSettings((state) => ({ ...state, showSettings: false }));\n  }, []);\n\n  const settingsSaveHandler = useCallback(() => {\n    setSettings((state) => ({ ...state, showSettings: false }));\n    saveSettings && saveSettings(settings);\n  }, [settings]);\n\n  return (\n    <Row dir=\"column\">\n      {loadingContacts && <Loader />}\n      <Col span={24} className=\"title\">\n        <h3>Contacts</h3>\n      </Col>\n      <Col span={24} className=\"contacts\">\n        <Row>\n          {state!.contacts.map((contact, index) => {\n            const isActive =\n              state!.currentContact === 'ALL'\n                ? contact.emails.reduce((acc, email) => acc && state!.currentContact.includes(email), true)\n                : contact.emails.includes(state!.currentContact);\n\n            return (\n              <Col span={24} className={'item' + (isActive ? ' active' : '')} key={index} onClick={() => selectContact && selectContact(contact)}>\n                {contact.kickname}\n                <Row>\n                  <Col span={24}>\n                    {contact.emails.map((email, index) => (\n                      <Tag color=\"blue\" key={index}>\n                        {email}\n                      </Tag>\n                    ))}\n                  </Col>\n                </Row>\n              </Col>\n            );\n          })}\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Row className=\"controls\">\n          <Col span={19} className=\"contacts-number\">\n            Number of contacts\n            <Tag color=\"green\" className=\"tag\">\n              {state!.contacts.length}\n            </Tag>\n          </Col>\n          <Col span={5} className=\"controllers\">\n            <Button type=\"ghost\" onClick={addContactClickHandler}>\n              <AddIcon />\n            </Button>\n            <Button type=\"ghost\" onClick={settingsClickHandler}>\n              <SettingsIcon />\n            </Button>\n          </Col>\n        </Row>\n      </Col>\n      {/** Add new contact */}\n      <Modal title=\"Add new contact\" visible={contactAdd.addContact} onOk={addContactSaveHandler} onCancel={addContactCancelHandler}>\n        <Row className=\"add-contact-modal\">\n          {contactAdd.errorAdding && (\n            <Col span={24} className=\"section\">\n              <Alert type=\"error\" message={contactAdd.errorContent} closable={true} />\n            </Col>\n          )}\n          <Col span={24} className=\"section\">\n            <Row>\n              <Col span={6}>Kickname</Col>\n              <Col span={18}>\n                <Input value={contactAdd.contact.kickname} onChange={addContactKicknameChangeHandler} />\n              </Col>\n            </Row>\n          </Col>\n          <Col span={24} className=\"section\">\n            <Row>\n              <Col span={6}>Email</Col>\n              <Col span={18}>\n                {contactAdd.contact.emails!.map((email, index) => (\n                  <Row key={index}>\n                    <Col span={18}>\n                      <Input value={email} onChange={(e) => addContactEmailChangeHandler(e, index)} />\n                    </Col>\n                    <Col span={4} offset={2}>\n                      {index === 0 ? (\n                        <Button onClick={addContactEmailHandler}>\n                          <AddIcon />\n                        </Button>\n                      ) : (\n                        <Button onClick={() => removeContactEmailHandler(index)}>\n                          <Remove />\n                        </Button>\n                      )}\n                    </Col>\n                  </Row>\n                ))}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Modal>\n      {/** Settings */}\n      <Modal title=\"Settings\" visible={settings.showSettings} onOk={settingsSaveHandler} onCancel={settingsCancelHandler}>\n        <Row>\n          <Col span={24}>\n            <Form>\n              <Form.Item label=\"Label\">\n                <Select defaultValue={'ALL'} value={settings.selectedLabel} onChange={settingsLabelChangeHandler}>\n                  {state!.labels.map((label, index) => (\n                    <Select.Option value={label} key={index}>\n                      {label}\n                    </Select.Option>\n                  ))}\n                </Select>\n              </Form.Item>\n              <Form.Item label=\"Model\">\n                <Select defaultValue={'snippet'} value={settings.messageShowModel} onChange={settingsMessageModelChangeHandler}>\n                  {['snippet', 'complete as text', 'complete as html'].map((label, index) => (\n                    <Select.Option value={label} key={index}>\n                      {label.toLocaleUpperCase()}\n                    </Select.Option>\n                  ))}\n                </Select>\n              </Form.Item>\n              <Form.Item label=\"Editor\">\n                <Select defaultValue={'simple'} value={settings.editor} onChange={settingsEditorTypeChangeHandler}>\n                  {['simple', 'advanced'].map((label, index) => (\n                    <Select.Option value={label} key={index}>\n                      {label.toLocaleUpperCase()}\n                    </Select.Option>\n                  ))}\n                </Select>\n              </Form.Item>\n              <Form.Item label=\"Message thread\">\n                <Select defaultValue={'last thread'} value={settings.messageThread} onChange={settingsMessageThreadChangeHandler}>\n                  {['new thread', 'last thread'].map((label, index) => (\n                    <Select.Option value={label} key={index}>\n                      {label.toLocaleUpperCase()}\n                    </Select.Option>\n                  ))}\n                </Select>\n              </Form.Item>\n            </Form>\n          </Col>\n        </Row>\n      </Modal>\n    </Row>\n  );\n};\n\nexport default React.memo(Contacts);\n",["100","101"],"/home/fouad/email/src/component/Inputs/AdvancedEditor.tsx",["102"],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"103","replacedBy":"107"},{"ruleId":"105","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":1,"column":38,"nodeType":"111","messageId":"112","endLine":1,"endColumn":45},{"ruleId":"109","severity":1,"message":"113","line":5,"column":10,"nodeType":"111","messageId":"112","endLine":5,"endColumn":23},{"ruleId":"114","severity":1,"message":"115","line":20,"column":6,"nodeType":"116","endLine":20,"endColumn":29,"suggestions":"117"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"118","severity":1,"message":"119","line":31,"column":42,"nodeType":"120","messageId":"121","endLine":31,"endColumn":44},{"ruleId":"114","severity":1,"message":"122","line":175,"column":6,"nodeType":"116","endLine":175,"endColumn":48,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":85,"column":5,"nodeType":"126","messageId":"121","endLine":90,"endColumn":6},{"ruleId":"109","severity":1,"message":"127","line":5,"column":10,"nodeType":"111","messageId":"112","endLine":5,"endColumn":16},{"ruleId":"114","severity":1,"message":"128","line":63,"column":5,"nodeType":"116","endLine":63,"endColumn":28,"suggestions":"129"},{"ruleId":"109","severity":1,"message":"130","line":4,"column":10,"nodeType":"111","messageId":"112","endLine":4,"endColumn":16},{"ruleId":"109","severity":1,"message":"131","line":34,"column":9,"nodeType":"111","messageId":"112","endLine":34,"endColumn":15},{"ruleId":"109","severity":1,"message":"132","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":27},{"ruleId":"109","severity":1,"message":"127","line":3,"column":10,"nodeType":"111","messageId":"112","endLine":3,"endColumn":16},{"ruleId":"109","severity":1,"message":"133","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":16},{"ruleId":"109","severity":1,"message":"134","line":2,"column":17,"nodeType":"111","messageId":"112","endLine":2,"endColumn":27},{"ruleId":"109","severity":1,"message":"135","line":3,"column":10,"nodeType":"111","messageId":"112","endLine":3,"endColumn":21},{"ruleId":"109","severity":1,"message":"136","line":4,"column":10,"nodeType":"111","messageId":"112","endLine":4,"endColumn":16},{"ruleId":"109","severity":1,"message":"113","line":5,"column":10,"nodeType":"111","messageId":"112","endLine":5,"endColumn":23},{"ruleId":"109","severity":1,"message":"137","line":7,"column":8,"nodeType":"111","messageId":"112","endLine":7,"endColumn":18},{"ruleId":"109","severity":1,"message":"138","line":17,"column":25,"nodeType":"111","messageId":"112","endLine":17,"endColumn":41},{"ruleId":"139","severity":1,"message":"140","line":86,"column":31,"nodeType":"141","messageId":"142","endLine":86,"endColumn":32,"suggestions":"143"},{"ruleId":"139","severity":1,"message":"144","line":86,"column":33,"nodeType":"141","messageId":"142","endLine":86,"endColumn":34,"suggestions":"145"},{"ruleId":"139","severity":1,"message":"140","line":86,"column":48,"nodeType":"141","messageId":"142","endLine":86,"endColumn":49,"suggestions":"146"},{"ruleId":"114","severity":1,"message":"147","line":118,"column":5,"nodeType":"116","endLine":118,"endColumn":17,"suggestions":"148"},{"ruleId":"114","severity":1,"message":"149","line":154,"column":6,"nodeType":"116","endLine":154,"endColumn":16,"suggestions":"150"},{"ruleId":"103","replacedBy":"151"},{"ruleId":"105","replacedBy":"152"},{"ruleId":"114","severity":1,"message":"128","line":29,"column":6,"nodeType":"116","endLine":29,"endColumn":15,"suggestions":"153"},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],["154"],["155"],"@typescript-eslint/no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'EditorContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["156"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","React Hook useEffect has missing dependencies: 'state.cache' and 'state.selectedContact.emails'. Either include them or remove the dependency array.",["157"],"no-duplicate-case","Duplicate case label.","SwitchCase","'Base64' is defined but never used.","React Hook useCallback has a missing dependency: 'onSubmit'. Either include it or remove the dependency array. If 'onSubmit' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["158"],"'Header' is defined but never used.","'decode' is assigned a value but never used.","'FormatSizeTwoTone' is defined but never used.","'Button' is defined but never used.","'useContext' is defined but never used.","'EditorState' is defined but never used.","'Editor' is defined but never used.","'ReactQuill' is defined but never used.","'setEditorContent' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["159","160"],"Unnecessary escape character: \\-.",["161","162"],["163","164"],"React Hook useCallback has missing dependencies: 'setContacts' and 'state'. Either include them or remove the dependency array.",["165"],"React Hook useCallback has a missing dependency: 'saveSettings'. Either include it or remove the dependency array.",["166"],["154"],["155"],["167"],"no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"messageId":"174","fix":"175","desc":"176"},{"messageId":"177","fix":"178","desc":"179"},{"messageId":"174","fix":"180","desc":"176"},{"messageId":"177","fix":"181","desc":"179"},{"messageId":"174","fix":"182","desc":"176"},{"messageId":"177","fix":"183","desc":"179"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [clicked, props]",{"range":"190","text":"191"},"Update the dependencies array to be: [state.cache, state.currentContact, state.currentLabel, state.selectedContact.emails]",{"range":"192","text":"193"},"Update the dependencies array to be: [content, filesContent, onSubmit]",{"range":"194","text":"195"},"removeEscape",{"range":"196","text":"197"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"198","text":"199"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"200","text":"197"},{"range":"201","text":"199"},{"range":"202","text":"197"},{"range":"203","text":"199"},"Update the dependencies array to be: [contactAdd.contact, setContacts, state]",{"range":"204","text":"205"},"Update the dependencies array to be: [saveSettings, settings]",{"range":"206","text":"207"},"Update the dependencies array to be: [content, onSubmit]",{"range":"208","text":"209"},[550,573],"[clicked, props]",[5762,5804],"[state.cache, state.currentContact, state.currentLabel, state.selectedContact.emails]",[1909,1932],"[content, filesContent, onSubmit]",[3276,3277],"",[3276,3276],"\\",[3278,3279],[3278,3278],[3293,3294],[3293,3293],[4590,4602],"[contactAdd.contact, setContacts, state]",[5799,5809],"[saveSettings, settings]",[785,794],"[content, onSubmit]"]