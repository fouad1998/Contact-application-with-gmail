[{"/home/fouad/email/src/utils/outlook/Connect.ts":"1","/home/fouad/email/src/components/Loader/Loader.tsx":"2","/home/fouad/email/src/components/Signin.tsx":"3","/home/fouad/email/src/config/outlook/config.ts":"4","/home/fouad/email/src/App.tsx":"5","/home/fouad/email/src/reportWebVitals.js":"6","/home/fouad/email/src/components/Gmail.tsx":"7","/home/fouad/email/src/utils/gmail/Label.ts":"8","/home/fouad/email/src/reducer/gmailReducer.ts":"9","/home/fouad/email/src/utils/gmail/GrabContact.ts":"10","/home/fouad/email/src/components/mail/ListMessages.tsx":"11","/home/fouad/email/src/components/view/EmailHTML.tsx":"12","/home/fouad/email/src/components/settings/settings/Settings.tsx":"13","/home/fouad/email/src/components/mail/AttachedFiles.tsx":"14","/home/fouad/email/src/utils/utils/GetFileSize.ts":"15","/home/fouad/email/src/utils/gmail/getMessageBodyAsText.ts":"16","/home/fouad/email/src/components/view/UploaderViewer.tsx":"17","/home/fouad/email/src/utils/outlook/MSALClient.ts":"18","/home/fouad/email/src/utils/gmail/LoadContactGmail.ts":"19","/home/fouad/email/src/constant/constant.ts":"20","/home/fouad/email/src/context/Gmail.ts":"21","/home/fouad/email/src/components/mail/Contacts.tsx":"22","/home/fouad/email/src/utils/gmail/getMessageBodyAsHTML.ts":"23","/home/fouad/email/src/utils/gmail/DownloadFile.ts":"24","/home/fouad/email/src/utils/utils/GetURLFromRcFile.ts":"25","/home/fouad/email/src/components/view/EmailText.tsx":"26","/home/fouad/email/src/utils/gmail/EmailContentFetch.ts":"27","/home/fouad/email/src/components/Inputs/AdvancedEditor.tsx":"28","/home/fouad/email/src/components/view/ImageViewer.tsx":"29","/home/fouad/email/src/utils/gmail/GetProfileEmail.ts":"30","/home/fouad/email/src/components/mail/RightSide.tsx":"31","/home/fouad/email/src/components/settings/ContactAdd/ContactAdd.tsx":"32","/home/fouad/email/src/utils/outlook/GetToken.ts":"33"},{"size":629,"mtime":1607904739169,"results":"34","hashOfConfig":"35"},{"size":394,"mtime":1607607420506,"results":"36","hashOfConfig":"35"},{"size":1261,"mtime":1607968991662,"results":"37","hashOfConfig":"35"},{"size":431,"mtime":1607610487997,"results":"38","hashOfConfig":"35"},{"size":2400,"mtime":1607969027414,"results":"39","hashOfConfig":"35"},{"size":362,"mtime":1606342194934,"results":"40","hashOfConfig":"35"},{"size":9722,"mtime":1607521102276,"results":"41","hashOfConfig":"35"},{"size":432,"mtime":1607467001842,"results":"42","hashOfConfig":"35"},{"size":3009,"mtime":1607520726011,"results":"43","hashOfConfig":"35"},{"size":691,"mtime":1607523006441,"results":"44","hashOfConfig":"35"},{"size":2302,"mtime":1607541874844,"results":"45","hashOfConfig":"35"},{"size":1515,"mtime":1607555878073,"results":"46","hashOfConfig":"35"},{"size":3874,"mtime":1607463976414,"results":"47","hashOfConfig":"35"},{"size":3170,"mtime":1607554151141,"results":"48","hashOfConfig":"35"},{"size":217,"mtime":1607527756997,"results":"49","hashOfConfig":"35"},{"size":600,"mtime":1607508543956,"results":"50","hashOfConfig":"35"},{"size":864,"mtime":1607548896062,"results":"51","hashOfConfig":"35"},{"size":176,"mtime":1607902301095,"results":"52","hashOfConfig":"35"},{"size":756,"mtime":1607523023889,"results":"53","hashOfConfig":"35"},{"size":485,"mtime":1607522987945,"results":"54","hashOfConfig":"35"},{"size":193,"mtime":1607520642947,"results":"55","hashOfConfig":"35"},{"size":1548,"mtime":1607541874848,"results":"56","hashOfConfig":"35"},{"size":484,"mtime":1607508477904,"results":"57","hashOfConfig":"35"},{"size":1227,"mtime":1607553636639,"results":"58","hashOfConfig":"35"},{"size":461,"mtime":1607546159636,"results":"59","hashOfConfig":"35"},{"size":1324,"mtime":1607539810242,"results":"60","hashOfConfig":"35"},{"size":653,"mtime":1607467001842,"results":"61","hashOfConfig":"35"},{"size":1951,"mtime":1607377755743,"results":"62","hashOfConfig":"35"},{"size":1457,"mtime":1607554066013,"results":"63","hashOfConfig":"35"},{"size":420,"mtime":1607519024111,"results":"64","hashOfConfig":"35"},{"size":1405,"mtime":1607525427575,"results":"65","hashOfConfig":"35"},{"size":5817,"mtime":1607522968917,"results":"66","hashOfConfig":"35"},{"size":1035,"mtime":1607969106439,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"e0i7g5",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fouad/email/src/utils/outlook/Connect.ts",[],"/home/fouad/email/src/components/Loader/Loader.tsx",[],["143","144"],"/home/fouad/email/src/components/Signin.tsx",["145"],"/home/fouad/email/src/config/outlook/config.ts",[],"/home/fouad/email/src/App.tsx",["146"],"/home/fouad/email/src/reportWebVitals.js",[],"/home/fouad/email/src/components/Gmail.tsx",["147","148","149"],"import { Col, Row } from 'antd';\nimport React, { useCallback, useEffect, useReducer, useState } from 'react';\nimport { GmailReducer } from '../reducer/gmailReducer';\nimport Contacts from './mail/Contacts';\nimport { useSnackbar } from 'notistack';\nimport { Button, Typography } from '@material-ui/core';\nimport { initialReducerValue } from '../constant/constant';\nimport { GmailContext } from '../context/Gmail';\nimport { loadContacts } from '../utils/gmail/LoadContactGmail';\nimport { getProfileEmail } from '../utils/gmail/GetProfileEmail';\nimport { getLabels } from '../utils/gmail/Label';\nimport { getListEmailId } from '../utils/gmail/ListEmailId';\nimport { getEmailsContent } from '../utils/gmail/EmailContentFetch';\nimport { sendMail } from '../utils/gmail/SendMail';\nimport { GmailSettings } from '../interfaces/gmail/GmailSettings';\nimport { Contact } from '../interfaces/data/Contact';\nimport { GMAIL_REDUCER_TYPE } from '../enum/gmail/GmailReducer';\nimport { GmailContextInterface } from '../interfaces/gmail/GmailContext';\nimport RightSide from './mail/RightSide';\n\ninterface GmailProps {}\n\nconst Gmail: React.FC<GmailProps> = () => {\n  const [state, dispatch] = useReducer(GmailReducer, initialReducerValue);\n  const [messages, setMessages] = useState<Array<any>>([]);\n  const [messagesStatus, setMessagesStatus] = useState<{ loading: boolean; error: boolean }>({\n    loading: false,\n    error: false,\n  });\n  const [contactsStatus, setContactsStatus] = useState<{ loading: boolean; error: boolean }>({\n    loading: true,\n    error: true,\n  });\n  const [reloadContacts, setReloadContacts] = useState<() => void>(() => {});\n  const { enqueueSnackbar } = useSnackbar();\n\n  // Load messages\n  const loadMessages = () => {\n    if (state.currentContact.length === 0) {\n      setMessages([]);\n    } else {\n      const contact = state.cache.find((contact) => {\n        const emails = contact.email;\n        const found = emails.reduceRight(\n          (currentState, email) => currentState && state.currentContact.includes(email),\n          true\n        );\n        return found;\n      });\n\n      if (contact) {\n        setMessages(contact.messages.map((message) => message.message).reverse());\n      } else {\n        setMessagesStatus((state) => ({ ...state, loading: true }));\n        // Load Email List for specific query\n        const loadEmailList = () => {\n          getListEmailId(state.currentContact, state.currentLabel, state.selectedContact.emails)\n            .then((response) => {\n              if (response.messagesId.length > 0) {\n                getEmailsContent(response.messagesId, state.userEmail).then((emailsContent) => {\n                  dispatch({\n                    type: GMAIL_REDUCER_TYPE.SET_MESSAGES,\n                    payload: {\n                      cache: [\n                        {\n                          email: state.selectedContact.emails,\n                          messages: emailsContent,\n                          nextPageToken: response.nextTokenPage,\n                        },\n                      ],\n                    },\n                  });\n                  setMessages(messages.map((e) => e.message).reverse());\n                  setMessagesStatus((state) => ({ ...state, loading: false }));\n                });\n              } else {\n                // no message in discussion\n                setMessages([]);\n                setMessagesStatus((state) => ({ ...state, loading: false }));\n              }\n            })\n            .catch(() => {\n              // show error message by using res.result.message\n              setMessagesStatus((state) => ({ ...state, loading: false }));\n              enqueueSnackbar(\n                <Row justify=\"space-between\" align=\"middle\">\n                  <Col>\n                    <Typography>Error loading the emails...</Typography>\n                  </Col>\n                  <Col>\n                    <Button onClick={loadEmailList}>Reload</Button>\n                  </Col>\n                </Row>,\n                { variant: 'error' }\n              );\n            });\n        };\n\n        // Starts\n        loadEmailList();\n      }\n    }\n  };\n\n  useEffect(() => {\n    const Profile = () => {\n      getProfileEmail()\n        .then((email) => {\n          // Load contacts\n          const contacts = () => {\n            loadContacts(email)\n              .then((contacts) => {\n                dispatch({\n                  type: GMAIL_REDUCER_TYPE.SET_CONTACTS,\n                  payload: { contacts: contacts },\n                });\n                setContactsStatus({ loading: false, error: false });\n              })\n              .catch(() => {\n                // Faild loading contacts\n                setReloadContacts(contacts);\n                setContactsStatus({ loading: false, error: true });\n                enqueueSnackbar(\n                  <Row justify=\"space-between\" align=\"middle\">\n                    <Col>\n                      <Typography>Error loading the contacts...</Typography>\n                    </Col>\n                    <Col>\n                      <Button onClick={() => loadContacts(email)}>Reload</Button>\n                    </Col>\n                  </Row>,\n                  { variant: 'error' }\n                );\n              });\n          };\n\n          contacts();\n\n          dispatch({\n            type: GMAIL_REDUCER_TYPE.SET_USER_EMAIL,\n            payload: { userEmail: email },\n          });\n        })\n        .catch(() => {\n          setReloadContacts(Profile);\n          setContactsStatus({ loading: false, error: true });\n          enqueueSnackbar(\n            <Row justify=\"space-between\" align=\"middle\">\n              <Col>\n                <Typography>Error loading the Contacts...</Typography>\n              </Col>\n              <Col>\n                <Button onClick={Profile}>Reload</Button>\n              </Col>\n            </Row>,\n            { variant: 'error' }\n          );\n        });\n    };\n\n    Profile();\n\n    getLabels().then((labels) => {\n      dispatch({\n        type: GMAIL_REDUCER_TYPE.SET_LABELS,\n        payload: { labels: ['ALL', ...labels] },\n      });\n    });\n  }, []);\n\n  useEffect(loadMessages, [state.currentContact, state.currentLabel, state.selectedContact, state.cache]);\n\n  const sendMessage = useCallback(\n    (content: string, header: string = '') => {\n      sendMail(\n        content,\n        { From: state.userEmail, To: state.currentContact, Subject: '', Date: new Date().toString() },\n        header\n      )\n        .then((message) => {\n          //TODO: ADD message to cache\n          setMessages((state) => [...state, message]);\n          enqueueSnackbar(\n            <Row justify=\"space-between\" align=\"middle\">\n              <Col>\n                <Typography>Email sent successfuly</Typography>\n              </Col>\n              <Col>\n                <Button>SENT</Button>\n              </Col>\n            </Row>,\n            { variant: 'success' }\n          );\n        })\n        .catch(() => {\n          enqueueSnackbar(\n            <Row justify=\"space-between\" align=\"middle\">\n              <Col>\n                <Typography>Faild to send the email</Typography>\n              </Col>\n              <Col>\n                <Button>Try Again</Button>\n              </Col>\n            </Row>,\n            { variant: 'error' }\n          );\n        });\n    },\n    [state.currentContact, state.userEmail]\n  );\n\n  const selectContact = useCallback(\n    (select: { kickname: string; emails: string[] }) => {\n      dispatch({\n        type: GMAIL_REDUCER_TYPE.SET_SELECT,\n        payload: { selectedContact: select },\n      });\n\n      if (state.currentContact !== 'ALL') {\n        // The user doesn't select the ALL option so we select the first entry\n        dispatch({\n          type: GMAIL_REDUCER_TYPE.SET_CURRENT_CONTACT,\n          payload: { currentContact: select.emails[0] },\n        });\n      }\n    },\n    [state.currentContact]\n  );\n\n  const setContacts = useCallback((contacts: Contact[]) => {\n    dispatch({\n      type: GMAIL_REDUCER_TYPE.SET_CONTACTS,\n      payload: { contacts },\n    });\n  }, []);\n\n  const settingsSaveHandler = useCallback((settings: GmailSettings) => {\n    dispatch({\n      type: GMAIL_REDUCER_TYPE.SET_CURRENT_LABEL,\n      payload: { currentLabel: settings.selectedLabel },\n    });\n    dispatch({\n      type: GMAIL_REDUCER_TYPE.SET_MESSAGE_MODEL_SHOW,\n      payload: { messageShowModel: settings.messageShowModel as 'snippet' | 'complete as text' | 'complete as html' },\n    });\n    dispatch({\n      type: GMAIL_REDUCER_TYPE.SET_MESSAGE_THREAD,\n      payload: { messageThread: settings.messageShowModel as 'new thread' | 'last thread' },\n    });\n    dispatch({\n      type: GMAIL_REDUCER_TYPE.SET_EDITOR_TYPE,\n      payload: { editor: settings.editor as 'simple' | 'advanced' },\n    });\n  }, []);\n\n  const contextValues: GmailContextInterface = {\n    state,\n    loadingContacts: contactsStatus.loading,\n    loadingMessages: messagesStatus.loading,\n    errorLoadingContacts: contactsStatus.error,\n    errorLoadingMessage: messagesStatus.error,\n    messages,\n    saveSettings: settingsSaveHandler,\n    selectContact,\n    setContacts,\n    reloadContacts,\n    sendMessage,\n    reloadMessages: loadMessages,\n  };\n\n  return (\n    <GmailContext.Provider value={contextValues}>\n      <Row className=\"gmail-interface\">\n        <Col span={24} className=\"inherit-height\">\n          <Row className=\"inherit-height application\">\n            <Col span={5} className=\"left-side\">\n              <Contacts />\n            </Col>\n            <Col span={19} className=\"right-side\">\n              <RightSide />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </GmailContext.Provider>\n  );\n};\n\nexport default Gmail;\n",["150","151"],"/home/fouad/email/src/utils/gmail/Label.ts",[],["152","153"],"/home/fouad/email/src/reducer/gmailReducer.ts",["154"],"import { GMAIL_REDUCER_TYPE } from '../enum/gmail/GmailReducer';\nimport { GmailReducerInterface } from '../interfaces/gmail/GmailReducer';\n\nexport const GmailReducer = (\n  state: GmailReducerInterface,\n  action: { type: GMAIL_REDUCER_TYPE; payload: Partial<GmailReducerInterface> }\n) => {\n  switch (action.type) {\n    case GMAIL_REDUCER_TYPE.SET_CURRENT_LABEL: {\n      if (typeof action.payload.currentLabel === 'string') {\n        return { ...state, currentLabel: action.payload.currentLabel };\n      }\n      break;\n    }\n\n    case GMAIL_REDUCER_TYPE.SET_LABELS: {\n      if (typeof action.payload.labels === 'object' && Array.isArray(action.payload.labels)) {\n        return { ...state, labels: action.payload.labels };\n      }\n      break;\n    }\n\n    case GMAIL_REDUCER_TYPE.SET_CONTACTS: {\n      if (typeof action.payload.contacts === 'object' && Array.isArray(action.payload.contacts)) {\n        return { ...state, contacts: action.payload.contacts };\n      }\n      break;\n    }\n\n    case GMAIL_REDUCER_TYPE.SET_CURRENT_CONTACT: {\n      if (typeof action.payload.currentContact === 'string') {\n        return { ...state, currentContact: action.payload.currentContact };\n      }\n      break;\n    }\n\n    case GMAIL_REDUCER_TYPE.SET_SELECT: {\n      return { ...state, selectedContact: action.payload.selectedContact! };\n    }\n\n    case GMAIL_REDUCER_TYPE.SET_MESSAGE_MODEL_SHOW: {\n      if (typeof action.payload.messageShowModel === 'string') {\n        return { ...state, messageShowModel: action.payload.messageShowModel };\n      }\n      break;\n    }\n\n    case GMAIL_REDUCER_TYPE.SET_USER_EMAIL: {\n      if (typeof action.payload.userEmail === 'string') {\n        return { ...state, userEmail: action.payload.userEmail };\n      }\n      break;\n    }\n\n    case GMAIL_REDUCER_TYPE.SET_EDITOR_TYPE: {\n      if (typeof action.payload.editor === 'string') {\n        return { ...state, editor: action.payload.editor };\n      }\n      break;\n    }\n\n    case GMAIL_REDUCER_TYPE.SET_EDITOR_TYPE: {\n      if (typeof action.payload.messageThread === 'string') {\n        return { ...state, messageThread: action.payload.messageThread };\n      }\n      break;\n    }\n\n    case GMAIL_REDUCER_TYPE.SET_MESSAGES: {\n      const { cache: Messages } = action.payload;\n      if (typeof Messages === 'object' && Array.isArray(Messages) && Messages.length === 1) {\n        // Search for collection who stores those emails\n        const found = state.cache.find((collection) => {\n          const state = collection.email.reduce(function (prev, cur) {\n            return prev && Messages[0].email.includes(cur);\n          }, true);\n          return state;\n        });\n\n        if (found) {\n          // The collection exists\n          found.messages = [...Messages[0].messages, ...found.messages];\n          found.nextPageToken = Messages[0].nextPageToken;\n          return { ...state };\n        } else {\n          return { ...state, cache: [...state.cache, Messages[0]] };\n        }\n      }\n      break;\n    }\n  }\n  return state;\n};\n","/home/fouad/email/src/utils/gmail/GrabContact.ts",[],"/home/fouad/email/src/components/mail/ListMessages.tsx",[],"/home/fouad/email/src/components/view/EmailHTML.tsx",[],"/home/fouad/email/src/components/settings/settings/Settings.tsx",["155","156"],"import { Modal, Row, Col, Form, Select } from 'antd';\nimport React, { useCallback, useContext, useState } from 'react';\nimport { GmailContext } from '../../../context/Gmail';\nimport { GmailSettings } from '../../../interfaces/gmail/GmailSettings';\n\ninterface SettingsProps {\n  visible: boolean;\n  onOk: () => void;\n  onCancel: () => void;\n}\n\nconst Settings: React.FC<SettingsProps> = ({ visible, onCancel, onOk }) => {\n  const { state, saveSettings } = useContext(GmailContext);\n\n  const [settings, setSettings] = useState<GmailSettings>({\n    selectedLabel: state!.currentLabel,\n    messageShowModel: state!.messageShowModel,\n    editor: state!.editor,\n    messageThread: state!.messageThread,\n  });\n\n  const settingsLabelChangeHandler = useCallback((label: string) => {\n    setSettings((state) => ({ ...state, selectedLabel: label }));\n  }, []);\n\n  const settingsMessageModelChangeHandler = useCallback((model: string) => {\n    setSettings((state) => ({ ...state, messageShowModel: model }));\n  }, []);\n\n  const settingsEditorTypeChangeHandler = useCallback((editorType: string) => {\n    setSettings((state) => ({ ...state, editor: editorType }));\n  }, []);\n\n  const settingsMessageThreadChangeHandler = useCallback((thread: string) => {\n    setSettings((state) => ({ ...state, messageThread: thread }));\n  }, []);\n\n  const settingsSaveHandler = useCallback(() => {\n    saveSettings && saveSettings(settings);\n    onOk();\n  }, [settings]);\n\n  const settingsCancelHandler = useCallback(() => {\n    setSettings({\n      selectedLabel: state!.currentLabel,\n      messageShowModel: state!.messageShowModel,\n      editor: state!.editor,\n      messageThread: state!.messageThread,\n    });\n    onCancel();\n  }, [state]);\n\n  return (\n    <Modal title=\"Settings\" visible={visible} onOk={settingsSaveHandler} onCancel={settingsCancelHandler}>\n      <Row>\n        <Col span={24}>\n          <Form>\n            <Form.Item label=\"Label\">\n              <Select defaultValue={'ALL'} value={settings.selectedLabel} onChange={settingsLabelChangeHandler}>\n                {state!.labels.map((label, index) => (\n                  <Select.Option value={label} key={index}>\n                    {label}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item label=\"Model\">\n              <Select\n                defaultValue={'snippet'}\n                value={settings.messageShowModel}\n                onChange={settingsMessageModelChangeHandler}\n              >\n                {['snippet', 'complete as text', 'complete as html'].map((label, index) => (\n                  <Select.Option value={label} key={index}>\n                    {label.toLocaleUpperCase()}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item label=\"Editor\">\n              <Select defaultValue={'simple'} value={settings.editor} onChange={settingsEditorTypeChangeHandler}>\n                {['simple', 'advanced'].map((label, index) => (\n                  <Select.Option value={label} key={index}>\n                    {label.toLocaleUpperCase()}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n            <Form.Item label=\"Message thread\">\n              <Select\n                defaultValue={'last thread'}\n                value={settings.messageThread}\n                onChange={settingsMessageThreadChangeHandler}\n              >\n                {['new thread', 'last thread'].map((label, index) => (\n                  <Select.Option value={label} key={index}>\n                    {label.toLocaleUpperCase()}\n                  </Select.Option>\n                ))}\n              </Select>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n    </Modal>\n  );\n};\n\nexport default React.memo(Settings);\n",["157","158"],"/home/fouad/email/src/components/mail/AttachedFiles.tsx",[],"/home/fouad/email/src/utils/utils/GetFileSize.ts",[],"/home/fouad/email/src/utils/gmail/getMessageBodyAsText.ts",["159"],"import { Base64 } from 'js-base64';\nimport parse from 'node-html-parser';\nimport { getMessageBodyAsHTML } from './getMessageBodyAsHTML';\n\nexport const getMessageBodyAsText = (message: any) => {\n  const parsedHTML = parse(getMessageBodyAsHTML(message));\n  const cleanText = parsedHTML.innerText;\n  //TODO: continue to enhance this feature\n  const encodedBody =\n    message.payload.parts === void 0\n      ? message.payload.body.data\n      : message.payload.parts.find((part: any) => part.mimeType === 'text/plain')?.body?.data;\n  const decode = Base64.decode(encodedBody || '');\n  return cleanText;\n};\n","/home/fouad/email/src/components/view/UploaderViewer.tsx",[],"/home/fouad/email/src/utils/outlook/MSALClient.ts",[],"/home/fouad/email/src/utils/gmail/LoadContactGmail.ts",[],"/home/fouad/email/src/constant/constant.ts",["160","161"],"import { GmailReducerInterface } from '../interfaces/gmail/GmailReducer';\n\nexport const emailRegexp = /([a-zA-Z0-9\\-\\.]{1,}@[a-zA-Z0-9\\-\\.]{1,}\\.[a-zA-Z0-9]{1,})/;\n\nexport const initialReducerValue: GmailReducerInterface = {\n  currentLabel: 'ALL',\n  nextPageToken: '',\n  cache: [],\n  labels: [],\n  contacts: [],\n  selectedContact: { kickname: '', emails: [] },\n  currentContact: '',\n  messageShowModel: 'snippet',\n  userEmail: '',\n  editor: 'simple',\n  messageThread: 'new thread',\n};\n","/home/fouad/email/src/context/Gmail.ts",[],"/home/fouad/email/src/components/mail/Contacts.tsx",[],"/home/fouad/email/src/utils/gmail/getMessageBodyAsHTML.ts",[],"/home/fouad/email/src/utils/gmail/DownloadFile.ts",[],"/home/fouad/email/src/utils/utils/GetURLFromRcFile.ts",[],"/home/fouad/email/src/components/view/EmailText.tsx",[],"/home/fouad/email/src/utils/gmail/EmailContentFetch.ts",[],"/home/fouad/email/src/components/Inputs/AdvancedEditor.tsx",["162"],"/home/fouad/email/src/components/view/ImageViewer.tsx",["163","164"],"/home/fouad/email/src/utils/gmail/GetProfileEmail.ts",[],"/home/fouad/email/src/components/mail/RightSide.tsx",[],"/home/fouad/email/src/components/settings/ContactAdd/ContactAdd.tsx",["165","166","167","168","169"],"/home/fouad/email/src/utils/outlook/GetToken.ts",[],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":21,"column":6,"nodeType":"176","endLine":21,"endColumn":29,"suggestions":"177"},{"ruleId":"174","severity":1,"message":"178","line":41,"column":29,"nodeType":"176","endLine":41,"endColumn":31,"suggestions":"179"},{"ruleId":"174","severity":1,"message":"180","line":169,"column":6,"nodeType":"176","endLine":169,"endColumn":8,"suggestions":"181"},{"ruleId":"174","severity":1,"message":"182","line":171,"column":27,"nodeType":"176","endLine":171,"endColumn":105,"suggestions":"183"},{"ruleId":"174","severity":1,"message":"184","line":209,"column":5,"nodeType":"176","endLine":209,"endColumn":44,"suggestions":"185"},{"ruleId":"170","replacedBy":"186"},{"ruleId":"172","replacedBy":"187"},{"ruleId":"170","replacedBy":"188"},{"ruleId":"172","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":62,"column":5,"nodeType":"192","messageId":"193","endLine":67,"endColumn":6},{"ruleId":"174","severity":1,"message":"194","line":41,"column":6,"nodeType":"176","endLine":41,"endColumn":16,"suggestions":"195"},{"ruleId":"174","severity":1,"message":"196","line":51,"column":6,"nodeType":"176","endLine":51,"endColumn":13,"suggestions":"197"},{"ruleId":"170","replacedBy":"198"},{"ruleId":"172","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":13,"column":9,"nodeType":"202","messageId":"203","endLine":13,"endColumn":15},{"ruleId":"204","severity":1,"message":"205","line":3,"column":42,"nodeType":"206","messageId":"207","endLine":3,"endColumn":43,"suggestions":"208"},{"ruleId":"204","severity":1,"message":"205","line":3,"column":62,"nodeType":"206","messageId":"207","endLine":3,"endColumn":63,"suggestions":"209"},{"ruleId":"174","severity":1,"message":"210","line":25,"column":6,"nodeType":"176","endLine":25,"endColumn":15,"suggestions":"211"},{"ruleId":"174","severity":1,"message":"212","line":40,"column":6,"nodeType":"176","endLine":40,"endColumn":8,"suggestions":"213"},{"ruleId":"214","severity":1,"message":"215","line":44,"column":46,"nodeType":"216","endLine":44,"endColumn":68},{"ruleId":"200","severity":1,"message":"217","line":30,"column":9,"nodeType":"202","messageId":"203","endLine":30,"endColumn":32},{"ruleId":"204","severity":1,"message":"205","line":74,"column":31,"nodeType":"206","messageId":"207","endLine":74,"endColumn":32,"suggestions":"218"},{"ruleId":"204","severity":1,"message":"219","line":74,"column":33,"nodeType":"206","messageId":"207","endLine":74,"endColumn":34,"suggestions":"220"},{"ruleId":"204","severity":1,"message":"205","line":74,"column":48,"nodeType":"206","messageId":"207","endLine":74,"endColumn":49,"suggestions":"221"},{"ruleId":"174","severity":1,"message":"222","line":114,"column":5,"nodeType":"176","endLine":114,"endColumn":17,"suggestions":"223"},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.","ArrayExpression",["226"],"React Hook useEffect has a missing dependency: 'GoogleAuth'. Either include it or remove the dependency array. You can also do a functional update 'setGoogleAuth(G => ...)' if you only need 'GoogleAuth' in the 'setGoogleAuth' call.",["227"],"React Hook useEffect has a missing dependency: 'enqueueSnackbar'. Either include it or remove the dependency array.",["228"],"React Hook useEffect has missing dependencies: 'enqueueSnackbar', 'messages', and 'state.userEmail'. Either include them or remove the dependency array. You can also do a functional update 'setMessages(m => ...)' if you only need 'messages' in the 'setMessages' call.",["229"],"React Hook useCallback has a missing dependency: 'enqueueSnackbar'. Either include it or remove the dependency array.",["230"],["224"],["225"],["224"],["225"],"no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","React Hook useCallback has missing dependencies: 'onOk' and 'saveSettings'. Either include them or remove the dependency array. If 'onOk' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["231"],"React Hook useCallback has a missing dependency: 'onCancel'. Either include it or remove the dependency array. If 'onCancel' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["232"],["224"],["225"],"@typescript-eslint/no-unused-vars","'decode' is assigned a value but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["233","234"],["235","236"],"React Hook useCallback has a missing dependency: 'onSubmit'. Either include it or remove the dependency array. If 'onSubmit' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["237"],"React Hook useEffect has missing dependencies: 'attachment', 'file', and 'isFile'. Either include them or remove the dependency array.",["238"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'addContactCancelHandler' is assigned a value but never used.",["239","240"],"Unnecessary escape character: \\-.",["241","242"],["243","244"],"React Hook useCallback has missing dependencies: 'onOk', 'setContacts', and 'state'. Either include them or remove the dependency array. If 'onOk' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["245"],"no-global-assign","no-unsafe-negation",{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"messageId":"260","fix":"261","desc":"262"},{"messageId":"263","fix":"264","desc":"265"},{"messageId":"260","fix":"266","desc":"262"},{"messageId":"263","fix":"267","desc":"265"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"messageId":"260","fix":"272","desc":"262"},{"messageId":"263","fix":"273","desc":"265"},{"messageId":"260","fix":"274","desc":"262"},{"messageId":"263","fix":"275","desc":"265"},{"messageId":"260","fix":"276","desc":"262"},{"messageId":"263","fix":"277","desc":"265"},{"desc":"278","fix":"279"},"Update the dependencies array to be: [clicked, props]",{"range":"280","text":"281"},"Update the dependencies array to be: [GoogleAuth]",{"range":"282","text":"283"},"Update the dependencies array to be: [enqueueSnackbar]",{"range":"284","text":"285"},"Update the dependencies array to be: [state.currentContact, state.currentLabel, state.selectedContact, state.cache, state.userEmail, messages, enqueueSnackbar]",{"range":"286","text":"287"},"Update the dependencies array to be: [enqueueSnackbar, state.currentContact, state.userEmail]",{"range":"288","text":"289"},"Update the dependencies array to be: [onOk, saveSettings, settings]",{"range":"290","text":"291"},"Update the dependencies array to be: [onCancel, state]",{"range":"292","text":"293"},"removeEscape",{"range":"294","text":"295"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"296","text":"297"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"298","text":"295"},{"range":"299","text":"297"},"Update the dependencies array to be: [content, onSubmit]",{"range":"300","text":"301"},"Update the dependencies array to be: [attachment, file, isFile]",{"range":"302","text":"303"},{"range":"304","text":"295"},{"range":"305","text":"297"},{"range":"306","text":"295"},{"range":"307","text":"297"},{"range":"308","text":"295"},{"range":"309","text":"297"},"Update the dependencies array to be: [contactAdd.contact, onOk, setContacts, state]",{"range":"310","text":"311"},[592,615],"[clicked, props]",[1218,1220],"[GoogleAuth]",[6132,6134],"[enqueueSnackbar]",[6164,6242],"[state.currentContact, state.currentLabel, state.selectedContact, state.cache, state.userEmail, messages, enqueueSnackbar]",[7344,7383],"[enqueueSnackbar, state.currentContact, state.userEmail]",[1429,1439],"[onOk, saveSettings, settings]",[1705,1712],"[onCancel, state]",[116,117],"",[116,116],"\\",[136,137],[136,136],[749,758],"[content, onSubmit]",[1270,1272],"[attachment, file, isFile]",[2734,2735],[2734,2734],[2736,2737],[2736,2736],[2751,2752],[2751,2751],[4177,4189],"[contactAdd.contact, onOk, setContacts, state]"]